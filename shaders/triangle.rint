/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "host_device.h"
#include "globals.glsl"
#include "common.glsl"

layout(set = S_SCENE, binding = eInstData,	scalar) buffer _InstanceInfo	{ InstanceData geoInfo[]; };
layout(buffer_reference, scalar) buffer Vertices { VertexAttributes v[]; };
layout(buffer_reference, scalar) buffer Indices	 { uvec3 i[];            };
layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

hitAttributeEXT vec2 bary;

void main()
{
  Ray r;
  r.origin    = gl_WorldRayOriginEXT;
  r.direction = gl_WorldRayDirectionEXT;
  mat4 o2w = mat4(gl_ObjectToWorldEXT);

  // Primitive buffer addresses
  Indices indices = Indices(geoInfo[gl_InstanceCustomIndexEXT].indexAddress);
  Vertices vertices = Vertices(geoInfo[gl_InstanceCustomIndexEXT].vertexAddress);
  uvec3 tri = indices.i[gl_PrimitiveID];

  // All in object space
  vec3 v0 = vertices.v[tri.x].position.xyz;
  vec3 v1 = vertices.v[tri.y].position.xyz;
  vec3 v2 = vertices.v[tri.z].position.xyz;

  v0 = vec3(o2w * vec4(v0, 1.0));
  v1 = vec3(o2w * vec4(v1, 1.0));
  v2 = vec3(o2w * vec4(v2, 1.0));

  float hitT;
  if (rayTrigIntersect(r, v0, v1, v2, bary, hitT))
    reportIntersectionEXT(hitT, HIT_KIND_TRIANGLE);
}